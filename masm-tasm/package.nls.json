{
	"editor.openEmu": "Open Emulator",
	"editor.runAsm": "Run ASM code",
	"editor.debugAsm": "Debug ASM code",
	"command.cleanalldianose": "MASM/TASM: Clean all diagnose information generated by the extension",
	"config.mode.singleFile": "copy your file to a seperate space, and do actions there",
	"config.mode.workspace": "do actions in the current workspace folder\n\n- use `mount` for dosbox and dosbox-xï¼Œcopy all files in workspace folder for jsdos\n- follow 8.3 filename rule",
	"config.assembler.description": "use TASM or MASM to operate your assembly codes\n\n should be the key of #masmtasm.ASM.actions#",
	"config.emulator.description": "DOS environment emulator",
	"config.emulator.jsdos": "Use jsdos(wdosbox), run in webview",
	"config.emulator.dosbox": "Use DOSBox",
	"config.emulator.dosboxX": "Use DOSBox-x",
	"config.emulator.player": "Use MSDOS-player",
	"config.savefirst": "Save the file before Open dosbox, run and debug ASM codes",
	"config.boxrun.description": "What to do after run code in dosbox",
	"config.boxrun.enum1": "do nothing, manually input exit or click 'x' or press 'Ctrl+F9' to exit",
	"config.boxrun.enum2": "exit DOSBox automatically",
	"config.boxrun.enum3": "pause and then exit",
	"config.boxrun.choose": "use choose command to decide keep dosbox or not",
	"config.boxconfig.description": "configuration for DOSBox, use format like the default value, see [dosbox](https://www.dosbox.com/wiki/Dosbox.conf),Please don't set `autoexec` here",
	"config.boxXconfig.description": "configuration for DOSBox-X, use format like the default value, see [dosbox-x](https://dosbox-x.com/wiki/), Please don't set `autoexec `here",
	"config.hover": "Display Hover information or not, restart VSCode to apply",
	"config.cpp-docs.links": "Links for fetch hover data from [cppdocs](https://github.com/MicrosoftDocs/cpp-docs). \"{vid}\" will be replaced as `Visual Studio Code Language ID`,\"{mid}\" will be replaced as `MLCP language code`, see [vscode-loc](https://github.com/microsoft/vscode-loc)",
	"config.PLF": "Experimental programmatic language features like outline,jump to definition/reference. Restart needed",
	"config.format.align.description": "Align code in different ways",
	"config.format.align.enum.indent.label": "Indent only",
	"config.format.align.enum.label.label": "Align to label",
	"config.format.align.enum.segment.label": "Align within segment",
	"config.format.align.enum.indent.md": "Indent the code with fixed size.\n\n```asm\nL1:\n    mov ax, 1\n    mov bx, 2\nLabel2:\n    mov cx, 3\n    mov dx, 4\n```",
	"config.format.align.enum.label.md": "Align the code to its label\n\n```asm\nL1:\n    mov ax, 1\n    mov bx, 2\nLabel2:\n        mov cx, 3\n        mov dx, 4\n```",
	"config.format.align.enum.segment.md": "Align the code within segment\n\n```asm\nL1:\n        mov ax, 1\n        mov bx, 2\nLabel2:\n        mov cx, 3\n        mov dx, 4\n```",
	"config.format.casing.description": "Format the casing of identifiers\n\n`lower` - all lower case\n\n`upper` - all upper case\n\n`title` - title case\n\n`off` - do not change the casing",
	"config.format.casing.instruction": "Instructions, e.g. `MOV` `JMP` `PUSH`",
	"config.format.casing.directive": "Directives, e.g. `INCLUDE` `END` `PROC`",
	"config.format.casing.register": "Registers, e.g. `AX` `SI` `CS`",
	"config.format.casing.operator": "Operators, e.g. `HIGH` `LOW` `PTR`",
	"config.format.alignOperand.description": "Align operands",
	"config.format.alignTrailingComment.description": "Align trailing comments",
	"config.format.alignSingleLineComment.description": "Align single line comments",
	"config.format.spaceAfterComma.description": "Add space after comma",
	"config.format.spaceAfterComma.enum.always": "Always keep a space after comma",
	"config.format.spaceAfterComma.enum.never": "Remove space after comma",
	"config.format.spaceAfterComma.enum.off": "Do not change the space after comma"	
}